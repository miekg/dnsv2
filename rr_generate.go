//go:build ignore

// rr_generate generates zrr.go which houses all the methods that implement the RR interface.

package main

import (
	"bytes"
	"flag"
	"fmt"
	"go/format"
	"html/template"
	"log"
	"os"
	"strings"

	"github.com/miekg/dns/internal/generate"
)

var hdr = `
// Code generated by "go run rr_generate.go"; DO NOT EDIT.

package dns

`

var TypeToRR = template.Must(template.New("TypeToRR").Parse(`
// TypeToRR is a map of constructors for each RR type.
var TypeToRR = map[uint16]func() RR{
{{range .}}{{if ne . "RFC3597"}}  Type{{.}}:  func() RR { return new({{.}}) },
{{end}}{{end}}                    }

`))

var RRToType = template.Must(template.New("RRToType").Parse(`
// RRToType is the reverse of TypeToRR, implemented as a function.
func RRToType(rr RR) uint16 {
    switch rr.(type) {
{{range .}}{{if ne . "RFC3597"}}  case *{{.}}:
	return Type{{.}}
{{end}}{{end}} }
	// if here, we don't have the RR in our pkg, check if it does Typer.
	if x, ok := rr.(Typer); ok {
		return x.Type()
	}
    return TypeNone
}

`))

var headerFunc = template.Must(template.New("headerFunc").Parse(`
{{range .}}  func (rr *{{.}}) Header() *Header { return &rr.Hdr }
{{end}}

`))

var funcMap = template.FuncMap{
	"join": strings.Join,
}

var fieldFunc = template.Must(template.New("fieldFunc").Funcs(funcMap).Parse(`
{{range $t, $fs := .}}  func (rr *{{$t}}) Fields() *Fields { return Fields{ {{join $fs ","}} }}
{{end}}

`))

const out = "_zrr.go" // tmp

var flagDebug = flag.Bool("debug", false, "Emit the non-formatted code to standard output and do not write it to a file.")

func main() {
	flag.Parse()
	types, err := generate.Types("types.go")
	if err != nil {
		log.Fatalf("Failed to generate %s: %v", out, err)
	}

	source := &bytes.Buffer{}
	source.WriteString(hdr)
	if err := headerFunc.Execute(source, types); err != nil {
		log.Fatalf("Failed to generate %s: %v", out, err)
	}
	if err := TypeToRR.Execute(source, types); err != nil {
		log.Fatalf("Failed to generate %s: %v", out, err)
	}
	if err := RRToType.Execute(source, types); err != nil {
		log.Fatalf("Failed to generate %s: %v", out, err)
	}

	fields, err := generate.Fields("types.go")
	if err != nil {
		log.Fatalf("Failed to generate %s: %v", out, err)
	}
	if err := fieldFunc.Execute(source, fields); err != nil {
		log.Fatalf("Failed to generate %s: %v", out, err)
	}

	formatted, err := format.Source(source.Bytes())
	if err != nil {
		source.WriteTo(os.Stderr)
		log.Fatalf("Failed to generate %s: %v", out, err)
	}

	if *flagDebug {
		fmt.Print(string(formatted))
		return
	}

	if err := os.WriteFile(out, formatted, 0640); err != nil {
		log.Fatalf("Failed to generate %s: %v", out, err)
	}
}
