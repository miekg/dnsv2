// Code generated by "go run rr_generate.go"; DO NOT EDIT.

package dns

func (rr *ANY) Header() *Header        { return &rr.Hdr }
func (rr *NULL) Header() *Header       { return &rr.Hdr }
func (rr *CNAME) Header() *Header      { return &rr.Hdr }
func (rr *HINFO) Header() *Header      { return &rr.Hdr }
func (rr *MB) Header() *Header         { return &rr.Hdr }
func (rr *MG) Header() *Header         { return &rr.Hdr }
func (rr *MINFO) Header() *Header      { return &rr.Hdr }
func (rr *MR) Header() *Header         { return &rr.Hdr }
func (rr *MF) Header() *Header         { return &rr.Hdr }
func (rr *MD) Header() *Header         { return &rr.Hdr }
func (rr *MX) Header() *Header         { return &rr.Hdr }
func (rr *AFSDB) Header() *Header      { return &rr.Hdr }
func (rr *X25) Header() *Header        { return &rr.Hdr }
func (rr *RT) Header() *Header         { return &rr.Hdr }
func (rr *NS) Header() *Header         { return &rr.Hdr }
func (rr *PTR) Header() *Header        { return &rr.Hdr }
func (rr *RP) Header() *Header         { return &rr.Hdr }
func (rr *SOA) Header() *Header        { return &rr.Hdr }
func (rr *TXT) Header() *Header        { return &rr.Hdr }
func (rr *SPF) Header() *Header        { return &rr.Hdr }
func (rr *AVC) Header() *Header        { return &rr.Hdr }
func (rr *SRV) Header() *Header        { return &rr.Hdr }
func (rr *NAPTR) Header() *Header      { return &rr.Hdr }
func (rr *CERT) Header() *Header       { return &rr.Hdr }
func (rr *DNAME) Header() *Header      { return &rr.Hdr }
func (rr *A) Header() *Header          { return &rr.Hdr }
func (rr *AAAA) Header() *Header       { return &rr.Hdr }
func (rr *PX) Header() *Header         { return &rr.Hdr }
func (rr *GPOS) Header() *Header       { return &rr.Hdr }
func (rr *LOC) Header() *Header        { return &rr.Hdr }
func (rr *SIG) Header() *Header        { return &rr.Hdr }
func (rr *RRSIG) Header() *Header      { return &rr.Hdr }
func (rr *NSEC) Header() *Header       { return &rr.Hdr }
func (rr *DLV) Header() *Header        { return &rr.Hdr }
func (rr *CDS) Header() *Header        { return &rr.Hdr }
func (rr *DS) Header() *Header         { return &rr.Hdr }
func (rr *KX) Header() *Header         { return &rr.Hdr }
func (rr *TA) Header() *Header         { return &rr.Hdr }
func (rr *TALINK) Header() *Header     { return &rr.Hdr }
func (rr *SSHFP) Header() *Header      { return &rr.Hdr }
func (rr *KEY) Header() *Header        { return &rr.Hdr }
func (rr *CDNSKEY) Header() *Header    { return &rr.Hdr }
func (rr *DNSKEY) Header() *Header     { return &rr.Hdr }
func (rr *IPSECKEY) Header() *Header   { return &rr.Hdr }
func (rr *AMTRELAY) Header() *Header   { return &rr.Hdr }
func (rr *RKEY) Header() *Header       { return &rr.Hdr }
func (rr *NSAPPTR) Header() *Header    { return &rr.Hdr }
func (rr *NSEC3) Header() *Header      { return &rr.Hdr }
func (rr *NSEC3PARAM) Header() *Header { return &rr.Hdr }
func (rr *TKEY) Header() *Header       { return &rr.Hdr }
func (rr *URI) Header() *Header        { return &rr.Hdr }
func (rr *DHCID) Header() *Header      { return &rr.Hdr }
func (rr *TLSA) Header() *Header       { return &rr.Hdr }
func (rr *SMIMEA) Header() *Header     { return &rr.Hdr }
func (rr *HIP) Header() *Header        { return &rr.Hdr }
func (rr *NINFO) Header() *Header      { return &rr.Hdr }
func (rr *NID) Header() *Header        { return &rr.Hdr }
func (rr *L32) Header() *Header        { return &rr.Hdr }
func (rr *L64) Header() *Header        { return &rr.Hdr }
func (rr *LP) Header() *Header         { return &rr.Hdr }
func (rr *EUI48) Header() *Header      { return &rr.Hdr }
func (rr *EUI64) Header() *Header      { return &rr.Hdr }
func (rr *CAA) Header() *Header        { return &rr.Hdr }
func (rr *UID) Header() *Header        { return &rr.Hdr }
func (rr *GID) Header() *Header        { return &rr.Hdr }
func (rr *UINFO) Header() *Header      { return &rr.Hdr }
func (rr *EID) Header() *Header        { return &rr.Hdr }
func (rr *NIMLOC) Header() *Header     { return &rr.Hdr }
func (rr *OPENPGPKEY) Header() *Header { return &rr.Hdr }
func (rr *CSYNC) Header() *Header      { return &rr.Hdr }
func (rr *ZONEMD) Header() *Header     { return &rr.Hdr }
func (rr *APL) Header() *Header        { return &rr.Hdr }

// TypeToRR is a map of constructors for each RR type.
var TypeToRR = map[uint16]func() RR{
	TypeANY:        func() RR { return new(ANY) },
	TypeNULL:       func() RR { return new(NULL) },
	TypeCNAME:      func() RR { return new(CNAME) },
	TypeHINFO:      func() RR { return new(HINFO) },
	TypeMB:         func() RR { return new(MB) },
	TypeMG:         func() RR { return new(MG) },
	TypeMINFO:      func() RR { return new(MINFO) },
	TypeMR:         func() RR { return new(MR) },
	TypeMF:         func() RR { return new(MF) },
	TypeMD:         func() RR { return new(MD) },
	TypeMX:         func() RR { return new(MX) },
	TypeAFSDB:      func() RR { return new(AFSDB) },
	TypeX25:        func() RR { return new(X25) },
	TypeRT:         func() RR { return new(RT) },
	TypeNS:         func() RR { return new(NS) },
	TypePTR:        func() RR { return new(PTR) },
	TypeRP:         func() RR { return new(RP) },
	TypeSOA:        func() RR { return new(SOA) },
	TypeTXT:        func() RR { return new(TXT) },
	TypeSPF:        func() RR { return new(SPF) },
	TypeAVC:        func() RR { return new(AVC) },
	TypeSRV:        func() RR { return new(SRV) },
	TypeNAPTR:      func() RR { return new(NAPTR) },
	TypeCERT:       func() RR { return new(CERT) },
	TypeDNAME:      func() RR { return new(DNAME) },
	TypeA:          func() RR { return new(A) },
	TypeAAAA:       func() RR { return new(AAAA) },
	TypePX:         func() RR { return new(PX) },
	TypeGPOS:       func() RR { return new(GPOS) },
	TypeLOC:        func() RR { return new(LOC) },
	TypeSIG:        func() RR { return new(SIG) },
	TypeRRSIG:      func() RR { return new(RRSIG) },
	TypeNSEC:       func() RR { return new(NSEC) },
	TypeDLV:        func() RR { return new(DLV) },
	TypeCDS:        func() RR { return new(CDS) },
	TypeDS:         func() RR { return new(DS) },
	TypeKX:         func() RR { return new(KX) },
	TypeTA:         func() RR { return new(TA) },
	TypeTALINK:     func() RR { return new(TALINK) },
	TypeSSHFP:      func() RR { return new(SSHFP) },
	TypeKEY:        func() RR { return new(KEY) },
	TypeCDNSKEY:    func() RR { return new(CDNSKEY) },
	TypeDNSKEY:     func() RR { return new(DNSKEY) },
	TypeIPSECKEY:   func() RR { return new(IPSECKEY) },
	TypeAMTRELAY:   func() RR { return new(AMTRELAY) },
	TypeRKEY:       func() RR { return new(RKEY) },
	TypeNSAPPTR:    func() RR { return new(NSAPPTR) },
	TypeNSEC3:      func() RR { return new(NSEC3) },
	TypeNSEC3PARAM: func() RR { return new(NSEC3PARAM) },
	TypeTKEY:       func() RR { return new(TKEY) },
	TypeURI:        func() RR { return new(URI) },
	TypeDHCID:      func() RR { return new(DHCID) },
	TypeTLSA:       func() RR { return new(TLSA) },
	TypeSMIMEA:     func() RR { return new(SMIMEA) },
	TypeHIP:        func() RR { return new(HIP) },
	TypeNINFO:      func() RR { return new(NINFO) },
	TypeNID:        func() RR { return new(NID) },
	TypeL32:        func() RR { return new(L32) },
	TypeL64:        func() RR { return new(L64) },
	TypeLP:         func() RR { return new(LP) },
	TypeEUI48:      func() RR { return new(EUI48) },
	TypeEUI64:      func() RR { return new(EUI64) },
	TypeCAA:        func() RR { return new(CAA) },
	TypeUID:        func() RR { return new(UID) },
	TypeGID:        func() RR { return new(GID) },
	TypeUINFO:      func() RR { return new(UINFO) },
	TypeEID:        func() RR { return new(EID) },
	TypeNIMLOC:     func() RR { return new(NIMLOC) },
	TypeOPENPGPKEY: func() RR { return new(OPENPGPKEY) },
	TypeCSYNC:      func() RR { return new(CSYNC) },
	TypeZONEMD:     func() RR { return new(ZONEMD) },
	TypeAPL:        func() RR { return new(APL) },
}

// RRToType is the reverse of TypeToRR, implemented as a function.
func RRToType(rr RR) uint16 {
	switch rr.(type) {
	case *ANY:
		return TypeANY
	case *NULL:
		return TypeNULL
	case *CNAME:
		return TypeCNAME
	case *HINFO:
		return TypeHINFO
	case *MB:
		return TypeMB
	case *MG:
		return TypeMG
	case *MINFO:
		return TypeMINFO
	case *MR:
		return TypeMR
	case *MF:
		return TypeMF
	case *MD:
		return TypeMD
	case *MX:
		return TypeMX
	case *AFSDB:
		return TypeAFSDB
	case *X25:
		return TypeX25
	case *RT:
		return TypeRT
	case *NS:
		return TypeNS
	case *PTR:
		return TypePTR
	case *RP:
		return TypeRP
	case *SOA:
		return TypeSOA
	case *TXT:
		return TypeTXT
	case *SPF:
		return TypeSPF
	case *AVC:
		return TypeAVC
	case *SRV:
		return TypeSRV
	case *NAPTR:
		return TypeNAPTR
	case *CERT:
		return TypeCERT
	case *DNAME:
		return TypeDNAME
	case *A:
		return TypeA
	case *AAAA:
		return TypeAAAA
	case *PX:
		return TypePX
	case *GPOS:
		return TypeGPOS
	case *LOC:
		return TypeLOC
	case *SIG:
		return TypeSIG
	case *RRSIG:
		return TypeRRSIG
	case *NSEC:
		return TypeNSEC
	case *DLV:
		return TypeDLV
	case *CDS:
		return TypeCDS
	case *DS:
		return TypeDS
	case *KX:
		return TypeKX
	case *TA:
		return TypeTA
	case *TALINK:
		return TypeTALINK
	case *SSHFP:
		return TypeSSHFP
	case *KEY:
		return TypeKEY
	case *CDNSKEY:
		return TypeCDNSKEY
	case *DNSKEY:
		return TypeDNSKEY
	case *IPSECKEY:
		return TypeIPSECKEY
	case *AMTRELAY:
		return TypeAMTRELAY
	case *RKEY:
		return TypeRKEY
	case *NSAPPTR:
		return TypeNSAPPTR
	case *NSEC3:
		return TypeNSEC3
	case *NSEC3PARAM:
		return TypeNSEC3PARAM
	case *TKEY:
		return TypeTKEY
	case *URI:
		return TypeURI
	case *DHCID:
		return TypeDHCID
	case *TLSA:
		return TypeTLSA
	case *SMIMEA:
		return TypeSMIMEA
	case *HIP:
		return TypeHIP
	case *NINFO:
		return TypeNINFO
	case *NID:
		return TypeNID
	case *L32:
		return TypeL32
	case *L64:
		return TypeL64
	case *LP:
		return TypeLP
	case *EUI48:
		return TypeEUI48
	case *EUI64:
		return TypeEUI64
	case *CAA:
		return TypeCAA
	case *UID:
		return TypeUID
	case *GID:
		return TypeGID
	case *UINFO:
		return TypeUINFO
	case *EID:
		return TypeEID
	case *NIMLOC:
		return TypeNIMLOC
	case *OPENPGPKEY:
		return TypeOPENPGPKEY
	case *CSYNC:
		return TypeCSYNC
	case *ZONEMD:
		return TypeZONEMD
	case *APL:
		return TypeAPL
	}
	// if here, we don't have the RR in our pkg, check if it does Typer.
	if x, ok := rr.(Typer); ok {
		return x.Type()
	}
	return TypeNone
}

// TypeToString is a map of strings for each RR type.
var TypeToString = map[uint16]string{
	TypeANY:        "ANY",
	TypeNULL:       "NULL",
	TypeCNAME:      "CNAME",
	TypeHINFO:      "HINFO",
	TypeMB:         "MB",
	TypeMG:         "MG",
	TypeMINFO:      "MINFO",
	TypeMR:         "MR",
	TypeMF:         "MF",
	TypeMD:         "MD",
	TypeMX:         "MX",
	TypeAFSDB:      "AFSDB",
	TypeX25:        "X25",
	TypeRT:         "RT",
	TypeNS:         "NS",
	TypePTR:        "PTR",
	TypeRP:         "RP",
	TypeSOA:        "SOA",
	TypeTXT:        "TXT",
	TypeSPF:        "SPF",
	TypeAVC:        "AVC",
	TypeSRV:        "SRV",
	TypeNAPTR:      "NAPTR",
	TypeCERT:       "CERT",
	TypeDNAME:      "DNAME",
	TypeA:          "A",
	TypeAAAA:       "AAAA",
	TypePX:         "PX",
	TypeGPOS:       "GPOS",
	TypeLOC:        "LOC",
	TypeSIG:        "SIG",
	TypeRRSIG:      "RRSIG",
	TypeNSEC:       "NSEC",
	TypeDLV:        "DLV",
	TypeCDS:        "CDS",
	TypeDS:         "DS",
	TypeKX:         "KX",
	TypeTA:         "TA",
	TypeTALINK:     "TALINK",
	TypeSSHFP:      "SSHFP",
	TypeKEY:        "KEY",
	TypeCDNSKEY:    "CDNSKEY",
	TypeDNSKEY:     "DNSKEY",
	TypeIPSECKEY:   "IPSECKEY",
	TypeAMTRELAY:   "AMTRELAY",
	TypeRKEY:       "RKEY",
	TypeNSEC3:      "NSEC3",
	TypeNSEC3PARAM: "NSEC3PARAM",
	TypeTKEY:       "TKEY",
	TypeURI:        "URI",
	TypeDHCID:      "DHCID",
	TypeTLSA:       "TLSA",
	TypeSMIMEA:     "SMIMEA",
	TypeHIP:        "HIP",
	TypeNINFO:      "NINFO",
	TypeNID:        "NID",
	TypeL32:        "L32",
	TypeL64:        "L64",
	TypeLP:         "LP",
	TypeEUI48:      "EUI48",
	TypeEUI64:      "EUI64",
	TypeCAA:        "CAA",
	TypeUID:        "UID",
	TypeGID:        "GID",
	TypeUINFO:      "UINFO",
	TypeEID:        "EID",
	TypeNIMLOC:     "NIMLOC",
	TypeOPENPGPKEY: "OPENPGPKEY",
	TypeCSYNC:      "CSYNC",
	TypeZONEMD:     "ZONEMD",
	TypeAPL:        "APL",
	TypeNSAPPTR:    "NSAP-PTR",
}

func (rr *A) Data() []Field     { return []Field{rr.A} }
func (rr *AAAA) Data() []Field  { return []Field{rr.AAAA} }
func (rr *AFSDB) Data() []Field { return []Field{rr.Subtype, rr.Hostname} }
func (rr *AMTRELAY) Data() []Field {
	return []Field{rr.Precedence, rr.GatewayType, rr.GatewayAddr, rr.GatewayHost}
}
func (rr *ANY) Data() []Field       { return []Field{} }
func (rr *APL) Data() []Field       { return []Field{rr.Prefixes} }
func (rr *APLPrefix) Data() []Field { return []Field{rr.Negation, rr.Network} }
func (rr *AVC) Data() []Field       { return []Field{rr.Txt} }
func (rr *CAA) Data() []Field       { return []Field{rr.Flag, rr.Tag, rr.Value} }
func (rr *CDNSKEY) Data() []Field   { return []Field{} }
func (rr *CDS) Data() []Field       { return []Field{} }
func (rr *CERT) Data() []Field      { return []Field{rr.Type, rr.KeyTag, rr.Algorithm, rr.Certificate} }
func (rr *CNAME) Data() []Field     { return []Field{rr.Target} }
func (rr *CSYNC) Data() []Field     { return []Field{rr.Serial, rr.Flags, rr.TypeBitMap} }
func (rr *DHCID) Data() []Field     { return []Field{rr.Digest} }
func (rr *DLV) Data() []Field       { return []Field{} }
func (rr *DNAME) Data() []Field     { return []Field{rr.Target} }
func (rr *DNSKEY) Data() []Field    { return []Field{rr.Flags, rr.Protocol, rr.Algorithm, rr.PublicKey} }
func (rr *DS) Data() []Field        { return []Field{rr.KeyTag, rr.Algorithm, rr.DigestType, rr.Digest} }
func (rr *EID) Data() []Field       { return []Field{rr.Endpoint} }
func (rr *EUI48) Data() []Field     { return []Field{rr.Address} }
func (rr *EUI64) Data() []Field     { return []Field{rr.Address} }
func (rr *GID) Data() []Field       { return []Field{rr.Gid} }
func (rr *GPOS) Data() []Field      { return []Field{rr.Longitude, rr.Latitude, rr.Altitude} }
func (rr *HINFO) Data() []Field     { return []Field{rr.Cpu, rr.Os} }
func (rr *HIP) Data() []Field {
	return []Field{rr.HitLength, rr.PublicKeyAlgorithm, rr.PublicKeyLength, rr.Hit, rr.PublicKey, rr.RendezvousServers}
}
func (rr *IPSECKEY) Data() []Field {
	return []Field{rr.Precedence, rr.GatewayType, rr.Algorithm, rr.GatewayAddr, rr.GatewayHost, rr.PublicKey}
}
func (rr *KEY) Data() []Field { return []Field{} }
func (rr *KX) Data() []Field  { return []Field{rr.Preference, rr.Exchanger} }
func (rr *L32) Data() []Field { return []Field{rr.Preference, rr.Locator32} }
func (rr *L64) Data() []Field { return []Field{rr.Preference, rr.Locator64} }
func (rr *LOC) Data() []Field {
	return []Field{rr.Version, rr.Size, rr.HorizPre, rr.VertPre, rr.Latitude, rr.Longitude, rr.Altitude}
}
func (rr *LP) Data() []Field    { return []Field{rr.Preference, rr.Fqdn} }
func (rr *MB) Data() []Field    { return []Field{rr.Mb} }
func (rr *MD) Data() []Field    { return []Field{rr.Md} }
func (rr *MF) Data() []Field    { return []Field{rr.Mf} }
func (rr *MG) Data() []Field    { return []Field{rr.Mg} }
func (rr *MINFO) Data() []Field { return []Field{rr.Rmail, rr.Email} }
func (rr *MR) Data() []Field    { return []Field{rr.Mr} }
func (rr *MX) Data() []Field    { return []Field{rr.Preference, rr.Mx} }
func (rr *NAPTR) Data() []Field {
	return []Field{rr.Order, rr.Preference, rr.Flags, rr.Service, rr.Regexp, rr.Replacement}
}
func (rr *NID) Data() []Field     { return []Field{rr.Preference, rr.NodeID} }
func (rr *NIMLOC) Data() []Field  { return []Field{rr.Locator} }
func (rr *NINFO) Data() []Field   { return []Field{rr.ZSData} }
func (rr *NS) Data() []Field      { return []Field{rr.Ns} }
func (rr *NSAPPTR) Data() []Field { return []Field{rr.Ptr} }
func (rr *NSEC) Data() []Field    { return []Field{rr.NextDomain, rr.TypeBitMap} }
func (rr *NSEC3) Data() []Field {
	return []Field{rr.Hash, rr.Flags, rr.Iterations, rr.SaltLength, rr.Salt, rr.HashLength, rr.NextDomain, rr.TypeBitMap}
}
func (rr *NSEC3PARAM) Data() []Field {
	return []Field{rr.Hash, rr.Flags, rr.Iterations, rr.SaltLength, rr.Salt}
}
func (rr *NULL) Data() []Field       { return []Field{rr.Null} }
func (rr *OPENPGPKEY) Data() []Field { return []Field{rr.PublicKey} }
func (rr *PTR) Data() []Field        { return []Field{rr.Ptr} }
func (rr *PX) Data() []Field         { return []Field{rr.Preference, rr.Map822, rr.Mapx400} }
func (rr *RFC3597) Data() []Field    { return []Field{rr.Rdata} }
func (rr *RKEY) Data() []Field       { return []Field{rr.Flags, rr.Protocol, rr.Algorithm, rr.PublicKey} }
func (rr *RP) Data() []Field         { return []Field{rr.Mbox, rr.Txt} }
func (rr *RRSIG) Data() []Field {
	return []Field{rr.TypeCovered, rr.Algorithm, rr.Labels, rr.OrigTtl, rr.Expiration, rr.Inception, rr.KeyTag, rr.SignerName, rr.Signature}
}
func (rr *RT) Data() []Field  { return []Field{rr.Preference, rr.Host} }
func (rr *SIG) Data() []Field { return []Field{} }
func (rr *SMIMEA) Data() []Field {
	return []Field{rr.Usage, rr.Selector, rr.MatchingType, rr.Certificate}
}
func (rr *SOA) Data() []Field {
	return []Field{rr.Ns, rr.Mbox, rr.Serial, rr.Refresh, rr.Retry, rr.Expire, rr.Minttl}
}
func (rr *SPF) Data() []Field    { return []Field{rr.Txt} }
func (rr *SRV) Data() []Field    { return []Field{rr.Priority, rr.Weight, rr.Port, rr.Target} }
func (rr *SSHFP) Data() []Field  { return []Field{rr.Algorithm, rr.Type, rr.FingerPrint} }
func (rr *TA) Data() []Field     { return []Field{rr.KeyTag, rr.Algorithm, rr.DigestType, rr.Digest} }
func (rr *TALINK) Data() []Field { return []Field{rr.PreviousName, rr.NextName} }
func (rr *TKEY) Data() []Field {
	return []Field{rr.Algorithm, rr.Inception, rr.Expiration, rr.Mode, rr.Error, rr.KeySize, rr.Key, rr.OtherLen, rr.OtherData}
}
func (rr *TLSA) Data() []Field {
	return []Field{rr.Usage, rr.Selector, rr.MatchingType, rr.Certificate}
}
func (rr *TXT) Data() []Field    { return []Field{rr.Txt} }
func (rr *UID) Data() []Field    { return []Field{rr.Uid} }
func (rr *UINFO) Data() []Field  { return []Field{rr.Uinfo} }
func (rr *URI) Data() []Field    { return []Field{rr.Priority, rr.Weight, rr.Target} }
func (rr *X25) Data() []Field    { return []Field{rr.PSDNAddress} }
func (rr *ZONEMD) Data() []Field { return []Field{rr.Serial, rr.Scheme, rr.Hash, rr.Digest} }
