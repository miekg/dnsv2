//go:build ignore

// rr_generate generates zpack.go which houses 2 large unpack/pack functions.

package main

import (
	"bytes"
	"flag"
	"html/template"
	"log"

	"github.com/miekg/dnsv2/internal/generate"
)

var hdr = `
// Code generated by "go run parse_generate.go"; DO NOT EDIT.

package dns

`

var parseFunc = template.Must(template.New("packFunc").Parse(`
func parse(rr RR, c *zlexer, o string) *ParseError {
	switch x := rr.(type) {
{{range .}}{{if ne . "RFC3597"}}  case *{{.}}:
	return x.parse(c, o)
{{end}}{{end}} }
	// If here we need to setup the channel and send the elements.
	// if here, we don't have the RR in our pkg, check if it does Packer.
//	if x, ok := rr.(Packer); ok {
//		return x.Pack(msg, off)
//	}
	return &ParseError{err: "no parse defined"}
}

`))

const out = "zparse.go"

func main() {
	flag.Parse()
	types, err := generate.Types("types.go")
	if err != nil {
		log.Fatalf("Failed to generate %s: %v", out, err)
	}

	source := &bytes.Buffer{}
	source.WriteString(hdr)

	if err := parseFunc.Execute(source, types); err != nil {
		log.Fatalf("Failed to generate %s: %v", out, err)
	}

	generate.Write(source, out)
}
